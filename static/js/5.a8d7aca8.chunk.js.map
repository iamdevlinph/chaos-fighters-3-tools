{"version":3,"sources":["containers/Fighters/utils/columns.js","containers/Fighters/utils/makeData.js","containers/Fighters/utils/tableOptions.js","containers/Fighters/FighterDetails.js","containers/Fighters/DisplaySwitch.js","containers/Fighters/Fighters.js"],"names":["defaultColOptions","filtering","cellStyle","whiteSpace","padding","headerStyle","textAlign","hidden","columns","Object","objectSpread","title","field","lookup","ordinary","rare","epic","legendary","render","_ref","type","StringUtil","toTitleCase","customSort","a","b","typeId","_ref2","calcStr","_ref3","calcAtk","concat","_ref4","calcAgi","_ref5","calcSpd","_ref6","calcEnd","_ref7","calcHp","water","fire","earth","thunder","wind","taijutsu","ninjutsu","fuinutsu","genjutsu","healing","_ref8","expert","emptyValue","_ref9","weapon","typeColors","createObj","val","level","newLevel","str","strGrowth","toFixed","agi","agiGrowth","end","endGrowth","strBmv","agiBmv","calcEva","agiEvaPer","endBmv","typeColor","makeData","data","calculatedData","arguments","length","undefined","_","chain","orderBy","map","reject","value","groupBy","toPairs","tableOptions","dataLen","emptyRowsWhenPaging","pageSize","pageSizeOptions","rowStyle","rowData","background","columnsButton","isHighest","fieldToCheck","bestValues","react_default","createElement","HighestValueCell","FighterDetailsComponent","props","fighter","FighterDetails_FighterDetails","FighterName","id","name","color","FighterStats","Table","styled","div","withConfig","displayName","componentId","table","FighterDetails","span","DisplaySwitch","displayType","onClick","Fragment","DisplayOption","className","button","getHighestValue","array","Math","max","apply","o","getLowestValue","min","FightersPage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rememberDisplayType","StorageUtil","getItem","state","displayChange","bind","assertThisInitialized","e","setState","currentTarget","setItem","_this2","_this$state","calculatedDataTable","fighterslist","calculatedDataText","highestStats","FightersContaine","Options","FighterLevel","onChange","levelChange","DisplaySwitchArea","Fighters_DisplaySwitch","ContentArea","TextDisplay","key","FighterTypeText","toSentenceCase","material_table_default","options","Component"],"mappings":"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","file":"static/js/5.a8d7aca8.chunk.js","sourcesContent":["import { StringUtil } from 'common-utils-pkg';\n\n// const toTwoDecimal = (val) => val.toFixed(0);\nconst cellStyle = {\n  whiteSpace: 'nowrap',\n  padding: '0 10px',\n}\nconst headerStyle = {\n  padding: '0px 10px',\n  textAlign: 'center'\n}\nconst defaultColOptions = {\n  filtering: false,\n  cellStyle,\n  headerStyle,\n  hidden: true\n}\nconst columns = [\n  {\n    ...defaultColOptions,\n    title: 'Name',\n    field: 'name',\n    hidden: false,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Type',\n    field: 'type',\n    filtering: true,\n    lookup: {\n      ordinary: 'Ordinary',\n      rare: 'Rare',\n      epic: 'Epic',\n      legendary: 'Legendary'\n    },\n    hidden: false,\n    render: ({ type }) => StringUtil.toTitleCase(type),\n    customSort: (a, b) => a.typeId - b.typeId,\n  },\n  {\n    ...defaultColOptions,\n    title: 'ISV STR',\n    field: 'str',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Growth STR',\n    field: 'strGrowth',\n  },\n  {\n    ...defaultColOptions,\n    title: 'BMV STR', // 1% ATK\n    field: 'strBmv',\n  },\n  {\n    ...defaultColOptions,\n    title: 'ISV AGI',\n    field: 'agi',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Growth AGI',\n    field: 'agiGrowth',\n  },\n  {\n    ...defaultColOptions,\n    title: 'BMV AGI', // 1 SPD 1 EVA\n    field: 'agiBmv',\n  },\n  // {\n  //   ...defaultColOptions,\n  //   title: 'AGI 1 EVA',\n  //   field: 'agiEvaPer',\n  // },\n  {\n    ...defaultColOptions,\n    title: 'ISV END',\n    field: 'end',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Growth END',\n    field: 'endGrowth',\n  },\n  {\n    ...defaultColOptions,\n    title: 'BMV END', // 1% HP\n    field: 'endBmv',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max STR',\n    field: 'calcStr',\n    hidden: false,\n    render: ({ calcStr }) => (calcStr),\n    customSort: (a, b) => a.calcStr - b.calcStr,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max %ATK',\n    field: 'calcAtk',\n    hidden: false,\n    render: ({ calcAtk }) => `${(calcAtk)} %`,\n    customSort: (a, b) => a.calcAtk - b.calcAtk,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max AGI',\n    field: 'calcAgi',\n    hidden: false,\n    render: ({ calcAgi }) => (calcAgi),\n    customSort: (a, b) => a.calcAgi - b.calcAgi,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max SPD/EVA',\n    field: 'calcSpd',\n    hidden: false,\n    render: ({ calcSpd }) => (calcSpd),\n    customSort: (a, b) => a.calcSpd - b.calcSpd,\n  },\n  // {\n  //   ...defaultColOptions,\n  //   title: 'Max EVA',\n  //   field: 'calcEva',\n  //   hidden: false,\n  //   render: ({ calcEva }) => toTwoDecimal(calcEva)\n  // },\n  {\n    ...defaultColOptions,\n    title: 'Max END',\n    field: 'calcEnd',\n    hidden: false,\n    render: ({ calcEnd }) => (calcEnd),\n    customSort: (a, b) => a.calcEnd - b.calcEnd,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max %HP',\n    field: 'calcHp',\n    hidden: false,\n    render: ({ calcHp }) => `${(calcHp)} %`,\n    customSort: (a, b) => a.calcHp - b.calcHp,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Expert',\n    field: 'expert',\n    filtering: true,\n    lookup: {\n      water: 'Water',\n      fire: \"Fire\",\n      earth: \"Earth\",\n      thunder: \"Thunder\",\n      wind: \"Wind\",\n      taijutsu: \"Taijutsu\",\n      ninjutsu: \"Ninjutsu\",\n      fuinutsu: \"Fuinutsu\",\n      genjutsu: \"Genjutsu\",\n      healing: \"Healing\",\n    },\n    hidden: false,\n    render: ({ expert }) => StringUtil.toTitleCase(expert),\n  },\n  {\n    ...defaultColOptions,\n    title: 'Weapon',\n    field: 'weapon',\n    emptyValue: '-',\n    render: ({ weapon }) => StringUtil.toTitleCase(weapon),\n  }\n];\n\nexport default columns;\n","import _ from 'lodash';\n\nconst typeColors = {\n  ordinary: '#CBC783',\n  rare: '#76BBC4',\n  epic: '#DB69AC',\n  legendary: '#FFA51A'\n}\n\nconst createObj = (val, level) => {\n  let newLevel = level == 1 ? level - 1 : level;\n  const calcStr = (val.str + (val.strGrowth * newLevel)).toFixed();\n  const calcAgi = (val.agi + (val.agiGrowth * newLevel)).toFixed();\n  const calcEnd = (val.end + (val.endGrowth * newLevel)).toFixed();\n  return {\n    ...val,\n    calcStr,\n    calcAtk: (calcStr / val.strBmv).toFixed(),\n    calcAgi,\n    calcSpd: (calcAgi / val.agiBmv).toFixed(),\n    calcEva: (calcAgi / val.agiEvaPer).toFixed(),\n    calcEnd,\n    calcHp: (calcEnd / val.endBmv).toFixed(),\n    typeColor: typeColors[val.type]\n  }\n}\n\nexport default (data, level = 30, displayType = 'text') => {\n  let calculatedData;\n  switch (displayType) {\n    case 'table':\n      calculatedData = _.chain(data)\n        .orderBy(['typeId', 'name'], ['asc', 'asc'])\n        .map(val => createObj(val, level))\n        .reject('__ignore')\n        .value();\n      break;\n    default:\n      calculatedData = _.chain(data)\n        .reject('__ignore')\n        .map(val => createObj(val, level))\n        .orderBy(['expert', 'typeId', 'name'], ['asc', 'asc', 'asc'])\n        .groupBy('expert')\n        .toPairs()\n        .value();\n  }\n\n  return calculatedData;\n}\n","const tableOptions = (dataLen) => {\n  return {\n    emptyRowsWhenPaging: false,\n    pageSize: dataLen,\n    pageSizeOptions: [\n      10, 25, 50, 100\n    ],\n    rowStyle: function (rowData) {\n      return {\n        background: rowData.typeColor,\n      }\n    },\n    columnsButton: true,\n    filtering: true\n  }\n}\n\nexport default tableOptions;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst isHighest = (val, fieldToCheck, bestValues) => (\n  +val === bestValues[fieldToCheck] ?\n    <HighestValueCell>{val}</HighestValueCell> :\n    <span>{val}</span>\n)\n\nconst FighterDetailsComponent = (props) => {\n  const { fighter, bestValues } = props;\n  return (\n    <FighterDetails>\n      <FighterName id={fighter.name} color={fighter.typeColor}>{fighter.name}</FighterName>\n      <FighterStats>\n        {/* <div>\n          ISV: {`STR ${fighter.str} AGI ${fighter.agi} END ${fighter.end}`}\n        </div>\n        <div>\n          Growth: {`STR ${fighter.strGrowth} AGI ${fighter.agiGrowth} END ${fighter.endGrowth}`}\n        </div>\n        <div>\n          BMV: {`STR ${fighter.strBmv} AGI ${fighter.agiBmv} END ${fighter.endBmv}`}\n        </div>\n        <div>\n          MAX: {`STR ${fighter.calcStr} AGI ${fighter.calcAgi} END ${fighter.calcEnd}`}\n        </div>\n        <div>\n          MAX: {`1% ATK ${fighter.calcAtk} SPD/EVA ${fighter.calcSpd} 1% HP ${fighter.calcHp}`}\n        </div> */}\n        <Table>\n          <tbody>\n            <tr>\n              <td>ISV</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.str, 'str', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.agi, 'agi', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.end, 'end', bestValues)}</td>\n            </tr>\n\n            {/* <tr>\n              <td>Growth</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.strGrowth, 'strGrowth', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.agiGrowth, 'agiGrowth', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.endGrowth, 'endGrowth', bestValues)}</td>\n            </tr> */}\n\n            <tr>\n              <td>BMV</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.strBmv, 'strBmv', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.agiBmv, 'agiBmv', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.endBmv, 'endBmv', bestValues)}</td>\n            </tr>\n\n            <tr>\n              <td>MAX</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.calcStr, 'calcStr', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.calcAgi, 'calcAgi', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.calcEnd, 'calcEnd', bestValues)}</td>\n            </tr>\n\n            <tr>\n              <td>MAX</td>\n              <td>ATK</td>\n              <td>{isHighest(fighter.calcAtk, 'calcAtk', bestValues)} %</td>\n              <td>SPD<br />EVA</td>\n              <td>{isHighest(fighter.calcSpd, 'calcSpd', bestValues)}</td>\n              <td>HP</td>\n              <td>{isHighest(fighter.calcHp, 'calcHp', bestValues)} %</td>\n            </tr>\n          </tbody>\n        </Table>\n      </FighterStats>\n    </FighterDetails>\n  );\n};\n\nexport default FighterDetailsComponent;\n\nconst FighterName = styled.div`\n  font-weight: bold;\n  font-size: 14px;\n  color: ${({ color }) => `${color}`};\n`;\nconst FighterStats = styled.div`\n  margin-left: 10px;\n`;\nconst Table = styled.table`\n  font-size: 14px;\n  border-collapse: collapse;\n  tr {\n    td:nth-child(1) {\n      font-weight: bold;\n      border-right: 1px solid black;\n    }\n  }\n  td {\n    /* border: 1px solid black; */\n    width: 75px;\n    height: 30px;\n    border-bottom: 1px solid black;\n  }\n`;\nconst FighterDetails = styled.div`\n  margin-bottom: 10px;\n`;\nconst HighestValueCell = styled.span`\n  color: red;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DisplaySwitch = (props) => {\n  const { displayType, onClick } = props;\n  return (\n    <>\n      Switch Display:\n      <DisplayOption displayType={displayType} type=\"text\" onClick={() => onClick('text')}><i className=\"fas fa-font\"></i> Text</DisplayOption>\n      <DisplayOption displayType={displayType} type=\"table\" onClick={() => onClick('table')}><i className=\"fas fa-table\"></i> Table</DisplayOption>\n    </>\n  );\n};\n\nexport default DisplaySwitch;\n\nconst DisplayOption = styled.button`\n  margin: 0 10px;\n  cursor: pointer;\n  background-color: ${({ displayType, type }) => displayType === type ? '#4CAF50' : '#909090'};\n  border: none;\n  color: white;\n  padding: 5px 25px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n`;\n","import React, { Component } from 'react';\nimport MaterialTable from 'material-table'\nimport styled from 'styled-components';\nimport { columns, makeData, tableOptions } from './utils';\nimport _ from 'lodash';\nimport { StringUtil, StorageUtil } from 'common-utils-pkg';\nimport FighterDetails from './FighterDetails';\nimport DisplaySwitch from './DisplaySwitch';\n\nimport fighterslist from './data/fighters.json';\n\n\nconst getHighestValue = (array, field) => Math.max.apply(Math, array.map((o) => o[field]))\nconst getLowestValue = (array, field) => Math.min.apply(Math, array.map((o) => o[field]))\n\nclass FightersPage extends Component {\n  constructor() {\n    super();\n    const rememberDisplayType = StorageUtil.getItem('displayType') || 'text';\n    this.state = {\n      level: 30,\n      displayType: rememberDisplayType\n    }\n    this.displayChange = this.displayChange.bind(this);\n  }\n  levelChange(e) {\n    this.setState({\n      level: e.currentTarget.value\n    })\n  }\n  displayChange(val) {\n    this.setState({\n      displayType: val\n    });\n    StorageUtil.setItem('displayType', val)\n  }\n  render() {\n    const { level, displayType } = this.state;\n    const calculatedDataTable = makeData(fighterslist, level, 'table');\n    const calculatedDataText = makeData(fighterslist, level, 'text');\n    const highestStats = {\n      str: getHighestValue(calculatedDataTable, 'str'),\n      agi: getHighestValue(calculatedDataTable, 'agi'),\n      end: getHighestValue(calculatedDataTable, 'end'),\n\n      // strGrowth: getHighestValue(calculatedDataTable, 'strGrowth'),\n      // agiGrowth: getHighestValue(calculatedDataTable, 'agiGrowth'),\n      // endGrowth: getHighestValue(calculatedDataTable, 'endGrowth'),\n\n      strBmv: getLowestValue(calculatedDataTable, 'strBmv'),\n      agiBmv: getLowestValue(calculatedDataTable, 'agiBmv'),\n      endBmv: getLowestValue(calculatedDataTable, 'endBmv'),\n\n      calcStr: getHighestValue(calculatedDataTable, 'calcStr'),\n      calcAgi: getHighestValue(calculatedDataTable, 'calcAgi'),\n      calcEnd: getHighestValue(calculatedDataTable, 'calcEnd'),\n\n      calcAtk: getHighestValue(calculatedDataTable, 'calcAtk'),\n      calcSpd: getHighestValue(calculatedDataTable, 'calcSpd'),\n      calcHp: getHighestValue(calculatedDataTable, 'calcHp'),\n    }\n    const tableTitle = 'Fighter Stats'\n    return (\n      <>\n        <div className=\"page-title\">Fighters</div>\n        <FightersContaine>\n          <Options>\n            <FighterLevel>\n              <label>Fighter Level </label>\n              <input type=\"number\" value={level} onChange={(e) => this.levelChange(e)} />\n            </FighterLevel>\n            <DisplaySwitchArea>\n              <DisplaySwitch displayType={displayType} onClick={this.displayChange}></DisplaySwitch>\n            </DisplaySwitchArea>\n          </Options>\n          <ContentArea>\n            {displayType === 'text' ?\n              (\n                <TextDisplay>\n                  The colored stats are the BEST value for each type.\n                  {_.map(calculatedDataText, (val) =>\n                    (\n                      <div key={val[0]}>\n                        <FighterTypeText>{StringUtil.toSentenceCase(val[0])} Expert Fighters</FighterTypeText>\n                        {_.map(val[1], (fighter) => (\n                          <FighterDetails fighter={fighter} key={fighter.name} bestValues={highestStats}></FighterDetails>\n                        ))}\n                      </div>\n                    )\n                  )}\n                </TextDisplay>\n              ) :\n              (\n                <MaterialTable\n                  columns={columns}\n                  data={calculatedDataTable}\n                  title={tableTitle}\n                  options={tableOptions(calculatedDataTable.length)}\n                />\n              )}\n          </ContentArea>\n        </FightersContaine>\n      </>\n    )\n  }\n}\n\nexport default FightersPage;\n\nconst FightersContaine = styled.div`\n  display: grid;\n  grid-template-areas:\n    \"options\"\n    \"content\";\n  grid-template-rows:\n    \"1fr\"\n    \"max-content\";\n`;\nconst FighterLevel = styled.div`\n  grid-area: level;\n  margin-bottom: 10px;\n  input {\n    text-align: center;\n    width: 50px;\n  }\n`;\nconst DisplaySwitchArea = styled.div`\n  grid-area: switch;\n`;\nconst ContentArea = styled.div`\n  grid-area: content;\n`;\nconst TextDisplay = styled.div`\n  box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12);\n  padding: 20px 24px;\n  background: #FFF;\n`;\nconst Options = styled.div`\n  grid-area: options;\n  display: grid;\n  grid-template-areas: \"level switch\";\n  grid-template-columns: repeat(2, max-content);\n  column-gap: 10px;\n`;\nconst FighterTypeText = styled.div`\n  /* text-align: center; */\n  font-weight: bold;\n  text-decoration: underline;\n  font-size: 16px;\n  margin: 10px 0;\n`;\n"],"sourceRoot":""}