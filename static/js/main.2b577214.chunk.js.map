{"version":3,"sources":["_globalStyle.js","components/Loading/Loading.js","components/Sidebar/Sidebar.js","routes/MainLayout/MainLayout.js","routes/loadable.js","routes/index.js","sagaDucks/_reducers.js","sagaDucks/_sagas.js","store.js","serviceWorker.js","index.js","App.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","LoadingComponent","props","isLoading","timedOut","error","react_default","a","createElement","defaultProps","urls","SidebarComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","shown","forceHide","setState","_this2","sidebarOptions","map","val","Link","key","react_router_dom","to","concat","activeClassName","onClick","showHideSidebar","Fragment","SidebarBG","ToggleSideBar","className","title","Sidebar_Sidebar","SidebarHeader","SidebarOptionsArea","Component","Sidebar","styled","div","withConfig","displayName","componentId","_ref","MainLayout","children","MainLayoutArea","SidebarArea","ContentArea","loadable","MainPage","Loadable","loader","__webpack_require__","e","then","bind","loading","Loading","FightersPage","Promise","all","TowerPage","GlossaryPage","VipPage","NotFound","AppRoute","Container","container","Layout","layout","rest","objectWithoutProperties","react_router","assign","render","routes","routes_AppRoute","exact","path","loadableCons","combineReducers","mySaga","regenerator_default","wrap","_context","prev","next","stop","_marked","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","es","store","_globalStyle","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b577214.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: #F5F5F5;\n    font-family: 'Open Sans', sans-serif;\n  }\n  a {\n    text-decoration: none;\n  }\n  * {\n    outline: none;\n  }\n  .page-title {\n    font-weight: bold;\n    font-size: 24px;\n    margin-bottom: 20px;\n  }\n  .underline {\n    text-decoration: underline;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LoadingComponent = props => {\n  const { isLoading, timedOut, error } = props;\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Something went wrong...</div>;\n  }\n  if (timedOut) {\n    return <div>Request timed out... </div>;\n  }\n  return null;\n};\n\nLoadingComponent.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  error: PropTypes.object,\n  timedOut: PropTypes.bool.isRequired,\n};\n\nLoadingComponent.defaultProps = {\n  error: null,\n};\n\nexport default LoadingComponent;\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst urls = ['fighters', 'tower', 'glossary', 'vip'];\n\nclass SidebarComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      shown: false,\n    };\n  }\n\n  showHideSidebar(forceHide) {\n    const { shown } = this.state;\n    this.setState({\n      shown: forceHide ? !forceHide : !shown,\n    });\n  }\n\n  render() {\n    const sidebarOptions = urls.map(val => {\n      return (\n        <Link key={val}>\n          <NavLink\n            to={`/${val}`}\n            activeClassName=\"active-route\"\n            onClick={() => this.showHideSidebar(true)}\n          >\n            {val}\n          </NavLink>\n        </Link>\n      );\n    });\n    const { shown } = this.state;\n    return (\n      <>\n        {shown && <SidebarBG onClick={() => this.showHideSidebar(true)} />}\n        <ToggleSideBar className=\"toggle\">\n          {shown ? (\n            <i\n              className=\"fas fa-times\"\n              title=\"menu\"\n              onClick={() => this.showHideSidebar()}\n            />\n          ) : (\n            <i\n              className=\"fas fa-bars\"\n              title=\"menu\"\n              onClick={() => this.showHideSidebar()}\n            />\n          )}\n        </ToggleSideBar>\n        <Sidebar shown={shown}>\n          <SidebarHeader>\n            <NavLink to=\"/\" onClick={() => this.showHideSidebar(true)}>\n              Chaos Fighters 3\n            </NavLink>\n          </SidebarHeader>\n          <SidebarOptionsArea>{sidebarOptions}</SidebarOptionsArea>\n        </Sidebar>\n      </>\n    );\n  }\n}\n\nexport default SidebarComponent;\n\nconst Sidebar = styled.div`\n  white-space: nowrap;\n  min-height: 100vh;\n  height: 100%;\n  background: #fff;\n  z-index: 2;\n\n  @media only screen and (max-width: 950px) {\n    display: ${({ shown }) => (shown ? 'block' : 'none')};\n    box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12);\n  }\n`;\nconst SidebarHeader = styled.div`\n  background: #ff4d00;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px 15px;\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12);\n  margin-bottom: 5px;\n  a {\n    color: white;\n    margin: -10px;\n    padding: 10px;\n    display: inline-block;\n  }\n`;\nconst SidebarOptionsArea = styled.div`\n  text-transform: uppercase;\n  text-align: center;\n`;\nconst Link = styled.div`\n  a {\n    display: block;\n    padding: 10px 0;\n    color: black;\n    /* color: white; */\n    &.active-route {\n      background: #353535;\n      font-weight: bold;\n      color: white;\n    }\n  }\n`;\nconst ToggleSideBar = styled.div`\n  display: none;\n  z-index: 2;\n  @media only screen and (max-width: 950px) {\n    position: absolute;\n    display: block;\n    cursor: pointer;\n    opacity: 1;\n    color: #007cff;\n    i {\n      font-size: 28px;\n      position: absolute;\n      &.fa-times {\n        left: 185px;\n      }\n      &.fa-bars {\n        left: 5px;\n      }\n    }\n  }\n`;\nconst SidebarBG = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: black;\n  opacity: 0.3;\n  position: absolute;\n  z-index: -11;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Sidebar } from '../../components';\n\nconst MainLayout = props => {\n  const { children } = props;\n  return (\n    <MainLayoutArea>\n      <SidebarArea>\n        <Sidebar />\n      </SidebarArea>\n      <ContentArea>{children}</ContentArea>\n    </MainLayoutArea>\n  );\n};\n\nexport default MainLayout;\n\nMainLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst MainLayoutArea = styled.div`\n  display: grid;\n  grid-template-columns: 185px 1fr;\n  grid-template-areas: 'sidebar content';\n\n  @media only screen and (max-width: 950px) {\n    grid-template-columns: 0 1fr;\n  }\n`;\nconst SidebarArea = styled.div`\n  grid-area: sidebar;\n  position: fixed;\n\n  @media only screen and (max-width: 950px) {\n    z-index: 2;\n  }\n`;\nconst ContentArea = styled.div`\n  grid-area: content;\n  box-shadow: inset 4px 0px 18px -5px rgba(0, 0, 0, 0.75);\n  padding: 20px;\n  /* height: 100vh; */\n  overflow: auto;\n  margin-left: -1px;\n  height: 94.5vh;\n`;\n","import Loadable from 'react-loadable';\n\nimport { Loading } from '../components';\n\nexport default {\n  MainPage: Loadable({\n    loader: () => import('../containers/MainPage/MainPage'),\n    loading: Loading,\n  }),\n  FightersPage: Loadable({\n    loader: () => import('../containers/Fighters/Fighters'),\n    loading: Loading,\n  }),\n  TowerPage: Loadable({\n    loader: () => import('../containers/Tower/Tower'),\n    loading: Loading,\n  }),\n  GlossaryPage: Loadable({\n    loader: () => import('../containers/Glossary/Glossary'),\n    loading: Loading,\n  }),\n  VipPage: Loadable({\n    loader: () => import('../containers/Vip/Vip'),\n    loading: Loading,\n  }),\n  NotFound: Loadable({\n    loader: () => import('../containers/NotFound/NotFound'),\n    loading: Loading,\n  }),\n};\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport MainLayout from './MainLayout/MainLayout';\nimport loadableCons from './loadable';\n\nconst AppRoute = ({ container: Container, layout: Layout, ...rest }) => (\n  <Route\n    {...rest}\n    render={props => (\n      <Layout>\n        <Container {...props} />\n      </Layout>\n    )}\n  />\n);\n\nexport default () => (\n  <HashRouter>\n    <Switch>\n      <AppRoute\n        exact\n        path=\"/\"\n        layout={MainLayout}\n        container={loadableCons.MainPage}\n      />\n      <AppRoute\n        exact\n        path=\"/fighters\"\n        layout={MainLayout}\n        container={loadableCons.FightersPage}\n      />\n      <AppRoute\n        exact\n        path=\"/tower\"\n        layout={MainLayout}\n        container={loadableCons.TowerPage}\n      />\n      <AppRoute\n        exact\n        path=\"/glossary\"\n        layout={MainLayout}\n        container={loadableCons.GlossaryPage}\n      />\n      <AppRoute\n        exact\n        path=\"/vip\"\n        layout={MainLayout}\n        container={loadableCons.VipPage}\n      />\n      <AppRoute\n        exact\n        path=\"/*\"\n        layout={MainLayout}\n        container={loadableCons.NotFound}\n      />\n    </Switch>\n  </HashRouter>\n);\n\nAppRoute.propTypes = {\n  container: PropTypes.func.isRequired,\n  layout: PropTypes.func.isRequired,\n};\n","import { combineReducers } from 'redux';\n\nexport default combineReducers({});\n","import { all } from 'redux-saga/effects';\n\nexport default function* mySaga() {\n  yield all([]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from './sagaDucks/_reducers';\nimport mySaga from './sagaDucks/_sagas';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// mount it on the Store\nexport default createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware),\n);\n\n// then run the saga\nsagaMiddleware.run(mySaga);\n\n// render the application\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport GlobalStyle from './_globalStyle';\n\nimport Routes from './routes';\nimport store from './store';\n\nexport default () => (\n  <Provider store={store}>\n    <GlobalStyle />\n    <Routes />\n  </Provider>\n);\n\n// listen to store changes\n// store.subscribe(() => {\n//   console.log(store.getState());\n// });\n"],"sourceRoot":""}