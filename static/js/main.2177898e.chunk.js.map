{"version":3,"sources":["_globalStyle.js","components/Loading/Loading.js","components/Sidebar/Sidebar.js","routes/MainLayout/MainLayout.js","routes/loadable.js","routes/index.js","sagaDucks/_reducers.js","sagaDucks/_sagas.js","store.js","serviceWorker.js","index.js","App.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","LoadingComponent","props","isLoading","timedOut","error","react_default","a","createElement","defaultProps","urls","Sidebar","sidebarOptions","map","val","Link","key","react_router_dom","to","concat","activeClassName","Sidebar_Sidebar","SidebarHeader","SidebarOptionsArea","styled","div","withConfig","displayName","componentId","MainLayout","MainLayout_MainLayout","SidebarArea","ContentArea","children","loadable","MainPage","Loadable","loader","__webpack_require__","e","then","bind","loading","Loading","FightersPage","Promise","all","TowerPage","GlossaryPage","NotFound","AppRoute","_ref","Container","container","Layout","layout","rest","Object","objectWithoutProperties","react_router","assign","render","routes","routes_AppRoute","exact","path","loadableCons","combineReducers","mySaga","regenerator_default","wrap","_context","prev","next","stop","_marked","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","es","store","_globalStyle","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2177898e.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: #F5F5F5;\n    font-family: 'Open Sans', sans-serif;\n  }\n  a {\n    text-decoration: none;\n  }\n  * {\n    outline: none;\n  }\n  .page-title {\n    font-weight: bold;\n    font-size: 24px;\n    margin-bottom: 20px;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LoadingComponent = (props) => {\n  const { isLoading, timedOut, error } = props;\n  if (isLoading) {\n    return (\n      <div>\n        Loading...\n      </div>\n    );\n  } if (error) {\n    return (\n      <div>\n        Something went wrong...\n      </div>\n    );\n  } if (timedOut) {\n    return (\n      <div>\n        Request timed out...\n        {' '}\n      </div>\n    );\n  }\n  return null;\n};\n\nLoadingComponent.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  error: PropTypes.object,\n  timedOut: PropTypes.bool.isRequired,\n};\n\nLoadingComponent.defaultProps = {\n  error: null,\n};\n\nexport default LoadingComponent;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst urls = [\n  'fighters',\n  'tower',\n  'glossary'\n]\n\nexport default (props) => {\n  const sidebarOptions = urls.map((val) => {\n    return (\n      <Link key={val}>\n        <NavLink to={`/${val}`}\n          activeClassName=\"active-route\">{val}</NavLink>\n      </Link>\n    )\n  })\n  return (\n    <Sidebar>\n      <SidebarHeader>\n        <NavLink to=\"/\">Chaos Fighters 3</NavLink>\n      </SidebarHeader>\n      <SidebarOptionsArea>\n        {sidebarOptions}\n      </SidebarOptionsArea>\n    </Sidebar>\n  )\n}\n\nconst Sidebar = styled.div`\n  white-space: nowrap;\n  min-height: 100vh;\n  height: 100%;\n  background: #d4d4d4;\n`;\nconst SidebarHeader = styled.div`\n  background: #FF4D00;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px 15px;\n  box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12);\n  margin-bottom: 5px;\n  a {\n    color: white;\n  }\n`;\nconst SidebarOptionsArea = styled.div`\n  text-transform: uppercase;\n  text-align: center;\n`;\nconst Link = styled.div`\n  a {\n    display: block;\n    padding: 10px 0;\n    color: black;\n    /* color: white; */\n    &.active-route {\n      background: white;\n      font-weight: bold;\n    }\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Sidebar } from '../../components';\n\nexport default (props) => {\n  return (\n    <MainLayout>\n      <SidebarArea>\n        <Sidebar></Sidebar>\n      </SidebarArea>\n      <ContentArea>\n        {props.children}\n      </ContentArea>\n    </MainLayout>\n  )\n}\n\nconst MainLayout = styled.div`\n  display: grid;\n  grid-template-columns: 185px 1fr;\n  grid-template-areas: \"sidebar content\";\n`;\nconst SidebarArea = styled.div`\n  grid-area: sidebar;\n  position: fixed;\n`;\nconst ContentArea = styled.div`\n  grid-area: content;\n  box-shadow: inset 4px 0px 18px -5px rgba(0,0,0,0.75);\n  padding: 20px;\n  /* height: 100vh; */\n  overflow: auto;\n  margin-left: -1px;\n  height: 94.5vh;\n`;\n","import Loadable from 'react-loadable';\n\nimport { Loading } from '../components';\n\nexport default {\n  MainPage: Loadable({\n    loader: () => import('../containers/MainPage/MainPage'),\n    loading: Loading,\n  }),\n  FightersPage: Loadable({\n    loader: () => import('../containers/Fighters/Fighters'),\n    loading: Loading,\n  }),\n  TowerPage: Loadable({\n    loader: () => import('../containers/Tower/Tower'),\n    loading: Loading,\n  }),\n  GlossaryPage: Loadable({\n    loader: () => import('../containers/Glossary/Glossary'),\n    loading: Loading,\n  }),\n  NotFound: Loadable({\n    loader: () => import('../containers/NotFound/NotFound'),\n    loading: Loading,\n  }),\n};\n","import React from 'react';\nimport {\n  HashRouter, Route, Switch,\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport MainLayout from './MainLayout/MainLayout';\nimport loadableCons from './loadable';\n\nconst AppRoute = ({ container: Container, layout: Layout, ...rest }) => (\n  <Route\n    {...rest}\n    render={props => (\n      <Layout>\n        <Container {...props} />\n      </Layout>\n    )}\n  />\n);\n\nexport default () => (\n  <HashRouter>\n    <Switch>\n      <AppRoute exact path=\"/\" layout={MainLayout} container={loadableCons.MainPage} />\n      <AppRoute exact path=\"/fighters\" layout={MainLayout} container={loadableCons.FightersPage} />\n      <AppRoute exact path=\"/tower\" layout={MainLayout} container={loadableCons.TowerPage} />\n      <AppRoute exact path=\"/glossary\" layout={MainLayout} container={loadableCons.GlossaryPage} />\n      <AppRoute exact path=\"/*\" layout={MainLayout} container={loadableCons.NotFound} />\n    </Switch>\n  </HashRouter>\n);\n\nAppRoute.propTypes = {\n  container: PropTypes.func.isRequired,\n  layout: PropTypes.func.isRequired,\n};\n","import { combineReducers } from 'redux';\n\nexport default combineReducers({});\n","import { all } from 'redux-saga/effects';\n\nexport default function* mySaga() {\n  yield all([\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from './sagaDucks/_reducers';\nimport mySaga from './sagaDucks/_sagas';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// mount it on the Store\nexport default createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware),\n);\n\n// then run the saga\nsagaMiddleware.run(mySaga);\n\n// render the application\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport GlobalStyle from './_globalStyle';\n\nimport Routes from './routes';\nimport store from './store';\n\nexport default () => (\n  <Provider store={store}>\n    <GlobalStyle />\n    <Routes />\n  </Provider>\n);\n\n// listen to store changes\n// store.subscribe(() => {\n//   console.log(store.getState());\n// });\n"],"sourceRoot":""}