{"version":3,"sources":["containers/Fighters/utils/columns.js","containers/Fighters/utils/makeData.js","containers/Fighters/utils/tableOptions.js","containers/Fighters/utils/actions.js","containers/Fighters/FighterDetails.js","containers/Fighters/DisplaySwitch.js","containers/Fighters/Fighters.js"],"names":["defaultColOptions","filtering","cellStyle","whiteSpace","padding","headerStyle","textAlign","hidden","columns","Object","objectSpread","title","field","lookup","ordinary","rare","epic","legendary","render","_ref","type","StringUtil","toTitleCase","customSort","a","b","typeId","_ref2","calcStr","_ref3","calcAtk","concat","_ref4","calcAgi","_ref5","calcSpd","_ref6","calcEnd","_ref7","calcHp","water","fire","earth","thunder","wind","taijutsu","ninjutsu","fuinutsu","genjutsu","healing","_ref8","expert","emptyValue","_ref9","weapon","typeColors","createObj","val","level","newLevel","str","strGrowth","toFixed","agi","agiGrowth","end","endGrowth","strBmv","agiBmv","calcEva","agiEvaPer","endBmv","typeColor","makeData","data","calculatedData","arguments","length","undefined","_","chain","orderBy","map","reject","value","groupBy","toPairs","tableOptions","dataLen","emptyRowsWhenPaging","pageSize","pageSizeOptions","rowStyle","rowData","background","columnsButton","actionsColumnIndex","actions","addFn","list","added","name","includes","icon","tooltip","onClick","iconProps","style","fontSize","color","isHighest","fieldToCheck","bestValues","react_default","createElement","HighestValueCell","FighterDetailsComponent","props","fighter","FighterDetails_FighterDetails","FighterName","id","FighterStats","Table","styled","div","withConfig","displayName","componentId","table","FighterDetails","span","DisplaySwitch","displayType","compareCtr","Fragment","DisplayOption","className","button","getHighestValue","array","Math","max","apply","toConsumableArray","o","getLowestValue","min","FightersPage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rememberDisplayType","StorageUtil","getItem","state","compareFighters","compareFightersCtr","displayChange","bind","assertThisInitialized","addToCompare","e","setState","currentTarget","setItem","_this$state","newItems","filter","f","selected","_this2","_this$state2","calculatedDataTable","fighterslist","calculatedDataText","comparedData","highestStats","FightersContaine","Options","FighterLevel","onChange","levelChange","DisplaySwitchArea","Fighters_DisplaySwitch","ContentArea","TextDisplay","key","FighterTypeText","toSentenceCase","material_table_default","options","tableActions","localization","body","emptyDataSourceMessage","Component"],"mappings":"qlXAWMA,EAAoB,CACxBC,WAAW,EACXC,UAVgB,CAChBC,WAAY,SACZC,QAAS,UASTC,YAPkB,CAClBD,QAAS,WACTE,UAAW,UAMXC,QAAQ,GA8JKC,EA5JC,CAACC,OAAAC,EAAA,EAAAD,CAAA,GAEVT,EAFS,CAGZW,MAAO,OACPC,MAAO,OACPL,QAAQ,IALIE,OAAAC,EAAA,EAAAD,CAAA,GAQTT,EARS,CASZW,MAAO,OACPC,MAAO,OACPX,WAAW,EACXY,OAAQ,CACNC,SAAU,WACVC,KAAM,OACNC,KAAM,OACNC,UAAW,aAEbV,QAAQ,EACRW,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcC,aAAWC,YAAYF,IAC7CG,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UApBvBjB,OAAAC,EAAA,EAAAD,CAAA,GAuBTT,EAvBS,CAwBZW,MAAO,UACPC,MAAO,QAzBKH,OAAAC,EAAA,EAAAD,CAAA,GA4BTT,EA5BS,CA6BZW,MAAO,aACPC,MAAO,cA9BKH,OAAAC,EAAA,EAAAD,CAAA,GAiCTT,EAjCS,CAkCZW,MAAO,UACPC,MAAO,WAnCKH,OAAAC,EAAA,EAAAD,CAAA,GAsCTT,EAtCS,CAuCZW,MAAO,UACPC,MAAO,QAxCKH,OAAAC,EAAA,EAAAD,CAAA,GA2CTT,EA3CS,CA4CZW,MAAO,aACPC,MAAO,cA7CKH,OAAAC,EAAA,EAAAD,CAAA,GAgDTT,EAhDS,CAiDZW,MAAO,UACPC,MAAO,WAlDKH,OAAAC,EAAA,EAAAD,CAAA,GA0DTT,EA1DS,CA2DZW,MAAO,UACPC,MAAO,QA5DKH,OAAAC,EAAA,EAAAD,CAAA,GA+DTT,EA/DS,CAgEZW,MAAO,aACPC,MAAO,cAjEKH,OAAAC,EAAA,EAAAD,CAAA,GAoETT,EApES,CAqEZW,MAAO,UACPC,MAAO,WAtEKH,OAAAC,EAAA,EAAAD,CAAA,GAyETT,EAzES,CA0EZW,MAAO,UACPC,MAAO,UAEPM,OAAQ,SAAAS,GAAA,OAAAA,EAAGC,SACXL,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,QAAUH,EAAEG,WA9ExBnB,OAAAC,EAAA,EAAAD,CAAA,GAiFTT,EAjFS,CAkFZW,MAAO,WACPC,MAAO,UACPL,QAAQ,EACRW,OAAQ,SAAAW,GAAA,IAAGC,EAAHD,EAAGC,QAAH,SAAAC,OAAoBD,EAApB,OACRP,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAEM,QAAUL,EAAEK,WAtFxBrB,OAAAC,EAAA,EAAAD,CAAA,GAyFTT,EAzFS,CA0FZW,MAAO,UACPC,MAAO,UAEPM,OAAQ,SAAAc,GAAA,OAAAA,EAAGC,SACXV,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAES,QAAUR,EAAEQ,WA9FxBxB,OAAAC,EAAA,EAAAD,CAAA,GAiGTT,EAjGS,CAkGZW,MAAO,cACPC,MAAO,UACPL,QAAQ,EACRW,OAAQ,SAAAgB,GAAA,OAAAA,EAAGC,SACXZ,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAEW,QAAUV,EAAEU,WAtGxB1B,OAAAC,EAAA,EAAAD,CAAA,GAgHTT,EAhHS,CAiHZW,MAAO,UACPC,MAAO,UAEPM,OAAQ,SAAAkB,GAAA,OAAAA,EAAGC,SACXd,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAEa,QAAUZ,EAAEY,WArHxB5B,OAAAC,EAAA,EAAAD,CAAA,GAwHTT,EAxHS,CAyHZW,MAAO,UACPC,MAAO,SACPL,QAAQ,EACRW,OAAQ,SAAAoB,GAAA,IAAGC,EAAHD,EAAGC,OAAH,SAAAR,OAAmBQ,EAAnB,OACRhB,WAAY,SAACC,EAAGC,GAAJ,OAAUD,EAAEe,OAASd,EAAEc,UA7HvB9B,OAAAC,EAAA,EAAAD,CAAA,GAgITT,EAhIS,CAiIZW,MAAO,SACPC,MAAO,SACPX,WAAW,EACXY,OAAQ,CACN2B,MAAO,QACPC,KAAM,OACNC,MAAO,QACPC,QAAS,UACTC,KAAM,OACNC,SAAU,WACVC,SAAU,WACVC,SAAU,WACVC,SAAU,WACVC,QAAS,WAEX1C,QAAQ,EACRW,OAAQ,SAAAgC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAAgB9B,aAAWC,YAAY6B,MAjJnC1C,OAAAC,EAAA,EAAAD,CAAA,GAoJTT,EApJS,CAqJZW,MAAO,SACPC,MAAO,SACPwC,WAAY,IACZlC,OAAQ,SAAAmC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAAgBjC,aAAWC,YAAYgC,OCvK7CC,EAAa,CACjBzC,SAAU,UACVC,KAAM,UACNC,KAAM,UACNC,UAAW,WAGPuC,EAAY,SAACC,EAAKC,GACtB,IAAMC,EAAoB,GAATD,EAAaA,EAAQ,EAAIA,EACpC9B,GAAW6B,EAAIG,IAAMH,EAAII,UAAYF,GAAUG,UAC/C7B,GAAWwB,EAAIM,IAAMN,EAAIO,UAAYL,GAAUG,UAC/CzB,GAAWoB,EAAIQ,IAAMR,EAAIS,UAAYP,GAAUG,UACrD,OAAOrD,OAAAC,EAAA,EAAAD,CAAA,GACFgD,EADL,CAEE7B,UACAE,SAAUF,EAAU6B,EAAIU,QAAQL,UAChC7B,UACAE,SAAUF,EAAUwB,EAAIW,QAAQN,UAChCO,SAAUpC,EAAUwB,EAAIa,WAAWR,UACnCzB,UACAE,QAASF,EAAUoB,EAAIc,QAAQT,UAC/BU,UAAWjB,EAAWE,EAAIrC,SAIfqD,EAAA,SAACC,GAA2C,IACrDC,EADgBjB,EAAqCkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7B,GAE5B,OAFyDA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,QAG5C,IAAK,QACHD,EAAiBI,IAAEC,MAAMN,GACtBO,QAAQ,CAAC,SAAU,QAAS,CAAC,MAAO,QACpCC,IAAI,SAAAzB,GAAG,OAAID,EAAUC,EAAKC,KAC1ByB,OAAO,YACPC,QACH,MACF,QACET,EAAiBI,IAAEC,MAAMN,GACtBS,OAAO,YACPD,IAAI,SAAAzB,GAAG,OAAID,EAAUC,EAAKC,KAC1BuB,QAAQ,CAAC,SAAU,SAAU,QAAS,CAAC,MAAO,MAAO,QACrDI,QAAQ,UACRC,UACAF,QAGP,OAAOT,GC/BMY,EAhBM,SAAAC,GACnB,MAAO,CACLC,qBAAqB,EACrBC,SAAUF,EACVG,gBAAiB,CAAC,GAAI,GAAI,GAAI,KAC9BC,SAJK,SAIIC,GACP,MAAO,CACLC,WAAYD,EAAQrB,YAGxBuB,eAAe,EACf9F,WAAW,EACX+F,oBAAqB,ICSVC,EArBC,SAAA9E,GAAqB,IAAlB+E,EAAkB/E,EAAlB+E,MAAOC,EAAWhF,EAAXgF,KAClBC,EAAQ,SAACC,GACb,OAAOF,EAAKG,SAASD,IAEvB,MAAO,CACL,SAAAR,GAAO,MAAK,CACVU,KAAMH,EAAMP,EAAQQ,MAAQ,gBAAkB,aAC9CG,QAASJ,EAAMP,EAAQQ,MAAQ,sBAAwB,iBACvDI,QAAS,WACPP,EAAML,EAAQQ,OAEhBK,UAAW,CACTC,MAAO,CACLC,SAAU,GACVC,MAAOT,EAAMP,EAAQQ,MAAQ,MAAQ,aCXzCS,EAAY,SAACrD,EAAKsD,EAAcC,GAApB,OACfvD,IAAQuD,EAAWD,GAClBE,EAAAzF,EAAA0F,cAACC,EAAD,KAAmB1D,GACnBwD,EAAAzF,EAAA0F,cAAA,YAAOzD,IAkFI2D,EA/EiB,SAACC,GAAU,IACjCC,EAAwBD,EAAxBC,QAASN,EAAeK,EAAfL,WACjB,OACEC,EAAAzF,EAAA0F,cAACK,EAAD,KACEN,EAAAzF,EAAA0F,cAACM,EAAD,CAAaC,GAAIH,EAAQjB,KAAMQ,MAAOS,EAAQ9C,WAAY8C,EAAQjB,MAClEY,EAAAzF,EAAA0F,cAACQ,EAAD,KAgBET,EAAAzF,EAAA0F,cAACS,EAAD,KACEV,EAAAzF,EAAA0F,cAAA,aACED,EAAAzF,EAAA0F,cAAA,UACED,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQ1D,IAAK,MAAOoD,IACnCC,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQvD,IAAK,MAAOiD,IACnCC,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQrD,IAAK,MAAO+C,KAarCC,EAAAzF,EAAA0F,cAAA,UACED,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQnD,OAAQ,SAAU6C,IACzCC,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQlD,OAAQ,SAAU4C,IACzCC,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQ/C,OAAQ,SAAUyC,KAG3CC,EAAAzF,EAAA0F,cAAA,UACED,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQ1F,QAAS,UAAWoF,IAC3CC,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQrF,QAAS,UAAW+E,IAC3CC,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQjF,QAAS,UAAW2E,KAG7CC,EAAAzF,EAAA0F,cAAA,UACED,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,iBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQxF,QAAS,UAAWkF,GAA3C,MACAC,EAAAzF,EAAA0F,cAAA,gBAAOD,EAAAzF,EAAA0F,cAAA,WAAP,OACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQnF,QAAS,UAAW6E,IAC3CC,EAAAzF,EAAA0F,cAAA,gBACAD,EAAAzF,EAAA0F,cAAA,UAAKJ,EAAUQ,EAAQ/E,OAAQ,SAAUyE,GAAzC,YAWRQ,EAAcI,IAAOC,IAAVC,WAAA,CAAAC,YAAA,8BAAAC,YAAA,gBAAGJ,CAAH,+CAGN,SAAAzG,GAAA,IAAG0F,EAAH1F,EAAG0F,MAAH,SAAA9E,OAAkB8E,KAEvBa,EAAeE,IAAOC,IAAVC,WAAA,CAAAC,YAAA,+BAAAC,YAAA,gBAAGJ,CAAH,uBAGZD,EAAQC,IAAOK,MAAVH,WAAA,CAAAC,YAAA,wBAAAC,YAAA,gBAAGJ,CAAH,0KAgBLM,EAAiBN,IAAOC,IAAVC,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAGJ,CAAH,yBAGdT,EAAmBS,IAAOO,KAAVL,WAAA,CAAAC,YAAA,mCAAAC,YAAA,gBAAGJ,CAAH,iCCpFPQ,EA9BO,SAAAf,GAAS,IACrBgB,EAAqChB,EAArCgB,YAAa5B,EAAwBY,EAAxBZ,QAAS6B,EAAejB,EAAfiB,WAC9B,OACErB,EAAAzF,EAAA0F,cAAAD,EAAAzF,EAAA+G,SAAA,uBAEEtB,EAAAzF,EAAA0F,cAACsB,EAAD,CACEH,YAAaA,EACbjH,KAAK,OACLqF,QAAS,kBAAMA,EAAQ,UAEvBQ,EAAAzF,EAAA0F,cAAA,KAAGuB,UAAU,gBALf,SAOAxB,EAAAzF,EAAA0F,cAACsB,EAAD,CACEH,YAAaA,EACbjH,KAAK,QACLqF,QAAS,kBAAMA,EAAQ,WAEvBQ,EAAAzF,EAAA0F,cAAA,KAAGuB,UAAU,iBALf,UAOAxB,EAAAzF,EAAA0F,cAACsB,EAAD,CACEH,YAAaA,EACbjH,KAAK,UACLqF,QAAS,kBAAMA,EAAQ,aAEvBQ,EAAAzF,EAAA0F,cAAA,KAAGuB,UAAU,kBALf,aAK4CH,EAL5C,OAaAE,EAAgBZ,IAAOc,OAAVZ,WAAA,CAAAC,YAAA,+BAAAC,YAAA,eAAGJ,CAAH,2KAGG,SAAAzG,GAAA,OAAAA,EAAGkH,cAAHlH,EAAgBC,KACX,UAAY,qBC5BjCuH,EAAkB,SAACC,EAAOhI,GAAR,OAAkBiI,KAAKC,IAALC,MAAAF,KAAIpI,OAAAuI,EAAA,EAAAvI,CAAQmI,EAAM1D,IAAI,SAAA+D,GAAC,OAAIA,EAAErI,QACjEsI,EAAiB,SAACN,EAAOhI,GAAR,OAAkBiI,KAAKM,IAALJ,MAAAF,KAAIpI,OAAAuI,EAAA,EAAAvI,CAAQmI,EAAM1D,IAAI,SAAA+D,GAAC,OAAIA,EAAErI,QAEhEwI,cACJ,SAAAA,IAAc,IAAAC,EAAA5I,OAAA6I,EAAA,EAAA7I,CAAA8I,KAAAH,GACZC,EAAA5I,OAAA+I,EAAA,EAAA/I,CAAA8I,KAAA9I,OAAAgJ,EAAA,EAAAhJ,CAAA2I,GAAAM,KAAAH,OACA,IAAMI,EAAsBC,cAAYC,QAAQ,gBAAkB,OAFtD,OAGZR,EAAKS,MAAQ,CACXpG,MAAO,GACP2E,YAAasB,EACbI,gBAAiB,GACjBC,mBAAoB,GAEtBX,EAAKY,cAAgBZ,EAAKY,cAAcC,KAAnBzJ,OAAA0J,EAAA,EAAA1J,CAAA4I,IACrBA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBzJ,OAAA0J,EAAA,EAAA1J,CAAA4I,IAVRA,2EAaFgB,GACVd,KAAKe,SAAS,CACZ5G,MAAO2G,EAAEE,cAAcnF,8CAIb3B,GACZ8F,KAAKe,SAAS,CACZjC,YAAa5E,IAEfmG,cAAYY,QAAQ,cAAe/G,wCAGxB4C,GAAM,IAAAoE,EAC+BlB,KAAKO,MAA7CC,EADSU,EACTV,gBAAiBC,EADRS,EACQT,mBACzB,GAAKD,EAAgBzD,SAASD,GAKvB,CACL,IACMqE,EADUX,EACSY,OAAO,SAAAC,GAAC,OAAIA,IAAMvE,IAC3CkD,KAAKe,SAAS,CACZP,gBAAiBW,EACjBV,mBAAoBA,EAAqB,SAT3CT,KAAKe,SAAS,CACZP,gBAAe,GAAAhI,OAAAtB,OAAAuI,EAAA,EAAAvI,CAAMsJ,GAAN,CAAuB1D,IACtC2D,mBAAoBA,EAAqB,qCAYtC,IACwBa,EADxBC,EAAAvB,KAAAwB,EAQHxB,KAAKO,MAJPpG,EAJKqH,EAILrH,MACA2E,EALK0C,EAKL1C,YACA2B,EANKe,EAMLf,mBACAD,EAPKgB,EAOLhB,gBAEIiB,EAAsBvG,EAASwG,EAAcvH,EAAO,SACpDwH,EAAqBzG,EAASwG,EAAcvH,EAAO,QACnDyH,GAVyBN,EAU2Bd,EAArBiB,EAT9BL,OAAO,SAAAC,GAAC,OAAIC,EAASvE,SAASsE,EAAEvE,SAUjC+E,EAAe,CACnBxH,IAAK+E,EAAgBqC,EAAqB,OAC1CjH,IAAK4E,EAAgBqC,EAAqB,OAC1C/G,IAAK0E,EAAgBqC,EAAqB,OAM1C7G,OAAQ+E,EAAe8B,EAAqB,UAC5C5G,OAAQ8E,EAAe8B,EAAqB,UAC5CzG,OAAQ2E,EAAe8B,EAAqB,UAE5CpJ,QAAS+G,EAAgBqC,EAAqB,WAC9C/I,QAAS0G,EAAgBqC,EAAqB,WAC9C3I,QAASsG,EAAgBqC,EAAqB,WAE9ClJ,QAAS6G,EAAgBqC,EAAqB,WAC9C7I,QAASwG,EAAgBqC,EAAqB,WAC9CzI,OAAQoG,EAAgBqC,EAAqB,WAG/C,OACE/D,EAAAzF,EAAA0F,cAAAD,EAAAzF,EAAA+G,SAAA,KACEtB,EAAAzF,EAAA0F,cAAA,OAAKuB,UAAU,cAAf,YACAxB,EAAAzF,EAAA0F,cAACmE,EAAD,KACEpE,EAAAzF,EAAA0F,cAACoE,EAAD,KACErE,EAAAzF,EAAA0F,cAACqE,EAAD,KACEtE,EAAAzF,EAAA0F,cAAA,+BACAD,EAAAzF,EAAA0F,cAAA,SACE9F,KAAK,SACLgE,MAAO1B,EACP8H,SAAU,SAAAnB,GAAC,OAAIS,EAAKW,YAAYpB,OAGpCpD,EAAAzF,EAAA0F,cAACwE,EAAD,KACEzE,EAAAzF,EAAA0F,cAACyE,EAAD,CACEtD,YAAaA,EACb5B,QAAS8C,KAAKU,cACd3B,WAAY0B,MAIlB/C,EAAAzF,EAAA0F,cAAC0E,EAAD,KAEmB,SAAhBvD,GACCpB,EAAAzF,EAAA0F,cAAC2E,EAAD,2DAEG9G,IAAEG,IAAIgG,EAAoB,SAAAzH,GAAG,OAC5BwD,EAAAzF,EAAA0F,cAAA,OAAK4E,IAAKrI,EAAI,IACZwD,EAAAzF,EAAA0F,cAAC6E,EAAD,KACG1K,aAAW2K,eAAevI,EAAI,IADjC,oBAGCsB,IAAEG,IAAIzB,EAAI,GAAI,SAAA6D,GAAO,OACpBL,EAAAzF,EAAA0F,cAACgB,EAAD,CACEZ,QAASA,EACTwE,IAAKxE,EAAQjB,KACbW,WAAYoE,UASP,UAAhB/C,GACCpB,EAAAzF,EAAA0F,cAAC+E,EAAAzK,EAAD,CACEhB,QAASA,EACTkE,KAAMsG,EACNrK,MAjDO,gBAkDPuL,QAAS3G,EAAayF,EAAoBnG,QAC1CoB,QAASkG,EAAa,CACpBjG,MAAOqD,KAAKa,aACZjE,KAAM4D,MAMK,YAAhB1B,GACCpB,EAAAzF,EAAA0F,cAAC+E,EAAAzK,EAAD,CACEhB,QAASA,EACTkE,KAAMyG,EACNxK,MA/DO,gBAgEPuL,QAAS3G,EAAayF,EAAoBnG,QAC1CuH,aAAc,CACZC,KAAM,CACJC,uBACE,+CAGNrG,QAASkG,EAAa,CACpBjG,MAAOqD,KAAKa,aACZjE,KAAM4D,gBAtJGwC,aAmKrBlB,GAFSjC,YAEUxB,IAAOC,IAAVC,WAAA,CAAAC,YAAA,6BAAAC,YAAA,YAAGJ,CAAH,mGAShB2D,EAAe3D,IAAOC,IAAVC,WAAA,CAAAC,YAAA,yBAAAC,YAAA,YAAGJ,CAAH,6EAQZ8D,EAAoB9D,IAAOC,IAAVC,WAAA,CAAAC,YAAA,8BAAAC,YAAA,YAAGJ,CAAH,uBAGjBgE,EAAchE,IAAOC,IAAVC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,YAAGJ,CAAH,wBAGXiE,EAAcjE,IAAOC,IAAVC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,YAAGJ,CAAH,sJAMX0D,EAAU1D,IAAOC,IAAVC,WAAA,CAAAC,YAAA,oBAAAC,YAAA,YAAGJ,CAAH,oIAOPmE,EAAkBnE,IAAOC,IAAVC,WAAA,CAAAC,YAAA,4BAAAC,YAAA,YAAGJ,CAAH","file":"static/js/5.78ba3ecc.chunk.js","sourcesContent":["import { StringUtil } from 'common-utils-pkg';\n\n// const toTwoDecimal = (val) => val.toFixed(0);\nconst cellStyle = {\n  whiteSpace: 'nowrap',\n  padding: '0 10px',\n};\nconst headerStyle = {\n  padding: '0px 10px',\n  textAlign: 'center',\n};\nconst defaultColOptions = {\n  filtering: false,\n  cellStyle,\n  headerStyle,\n  hidden: true,\n};\nconst columns = [\n  {\n    ...defaultColOptions,\n    title: 'Name',\n    field: 'name',\n    hidden: false,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Type',\n    field: 'type',\n    filtering: true,\n    lookup: {\n      ordinary: 'Ordinary',\n      rare: 'Rare',\n      epic: 'Epic',\n      legendary: 'Legendary',\n    },\n    hidden: false,\n    render: ({ type }) => StringUtil.toTitleCase(type),\n    customSort: (a, b) => a.typeId - b.typeId,\n  },\n  {\n    ...defaultColOptions,\n    title: 'ISV STR',\n    field: 'str',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Growth STR',\n    field: 'strGrowth',\n  },\n  {\n    ...defaultColOptions,\n    title: 'BMV STR', // 1% ATK\n    field: 'strBmv',\n  },\n  {\n    ...defaultColOptions,\n    title: 'ISV AGI',\n    field: 'agi',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Growth AGI',\n    field: 'agiGrowth',\n  },\n  {\n    ...defaultColOptions,\n    title: 'BMV AGI', // 1 SPD 1 EVA\n    field: 'agiBmv',\n  },\n  // {\n  //   ...defaultColOptions,\n  //   title: 'AGI 1 EVA',\n  //   field: 'agiEvaPer',\n  // },\n  {\n    ...defaultColOptions,\n    title: 'ISV END',\n    field: 'end',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Growth END',\n    field: 'endGrowth',\n  },\n  {\n    ...defaultColOptions,\n    title: 'BMV END', // 1% HP\n    field: 'endBmv',\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max STR',\n    field: 'calcStr',\n    // hidden: false,\n    render: ({ calcStr }) => calcStr,\n    customSort: (a, b) => a.calcStr - b.calcStr,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max %ATK',\n    field: 'calcAtk',\n    hidden: false,\n    render: ({ calcAtk }) => `${calcAtk} %`,\n    customSort: (a, b) => a.calcAtk - b.calcAtk,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max AGI',\n    field: 'calcAgi',\n    // hidden: false,\n    render: ({ calcAgi }) => calcAgi,\n    customSort: (a, b) => a.calcAgi - b.calcAgi,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max SPD/EVA',\n    field: 'calcSpd',\n    hidden: false,\n    render: ({ calcSpd }) => calcSpd,\n    customSort: (a, b) => a.calcSpd - b.calcSpd,\n  },\n  // {\n  //   ...defaultColOptions,\n  //   title: 'Max EVA',\n  //   field: 'calcEva',\n  //   hidden: false,\n  //   render: ({ calcEva }) => toTwoDecimal(calcEva)\n  // },\n  {\n    ...defaultColOptions,\n    title: 'Max END',\n    field: 'calcEnd',\n    // hidden: false,\n    render: ({ calcEnd }) => calcEnd,\n    customSort: (a, b) => a.calcEnd - b.calcEnd,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Max %HP',\n    field: 'calcHp',\n    hidden: false,\n    render: ({ calcHp }) => `${calcHp} %`,\n    customSort: (a, b) => a.calcHp - b.calcHp,\n  },\n  {\n    ...defaultColOptions,\n    title: 'Expert',\n    field: 'expert',\n    filtering: true,\n    lookup: {\n      water: 'Water',\n      fire: 'Fire',\n      earth: 'Earth',\n      thunder: 'Thunder',\n      wind: 'Wind',\n      taijutsu: 'Taijutsu',\n      ninjutsu: 'Ninjutsu',\n      fuinutsu: 'Fuinutsu',\n      genjutsu: 'Genjutsu',\n      healing: 'Healing',\n    },\n    hidden: false,\n    render: ({ expert }) => StringUtil.toTitleCase(expert),\n  },\n  {\n    ...defaultColOptions,\n    title: 'Weapon',\n    field: 'weapon',\n    emptyValue: '-',\n    render: ({ weapon }) => StringUtil.toTitleCase(weapon),\n  },\n];\n\nexport default columns;\n","import _ from 'lodash';\n\nconst typeColors = {\n  ordinary: '#CBC783',\n  rare: '#76BBC4',\n  epic: '#DB69AC',\n  legendary: '#FFA51A',\n};\n\nconst createObj = (val, level) => {\n  const newLevel = level == 1 ? level - 1 : level;\n  const calcStr = (val.str + val.strGrowth * newLevel).toFixed();\n  const calcAgi = (val.agi + val.agiGrowth * newLevel).toFixed();\n  const calcEnd = (val.end + val.endGrowth * newLevel).toFixed();\n  return {\n    ...val,\n    calcStr,\n    calcAtk: (calcStr / val.strBmv).toFixed(),\n    calcAgi,\n    calcSpd: (calcAgi / val.agiBmv).toFixed(),\n    calcEva: (calcAgi / val.agiEvaPer).toFixed(),\n    calcEnd,\n    calcHp: (calcEnd / val.endBmv).toFixed(),\n    typeColor: typeColors[val.type],\n  };\n};\n\nexport default (data, level = 30, displayType = 'text') => {\n  let calculatedData;\n  switch (displayType) {\n    case 'table':\n      calculatedData = _.chain(data)\n        .orderBy(['typeId', 'name'], ['asc', 'asc'])\n        .map(val => createObj(val, level))\n        .reject('__ignore')\n        .value();\n      break;\n    default:\n      calculatedData = _.chain(data)\n        .reject('__ignore')\n        .map(val => createObj(val, level))\n        .orderBy(['expert', 'typeId', 'name'], ['asc', 'asc', 'asc'])\n        .groupBy('expert')\n        .toPairs()\n        .value();\n  }\n\n  return calculatedData;\n};\n","const tableOptions = dataLen => {\n  return {\n    emptyRowsWhenPaging: false,\n    pageSize: dataLen,\n    pageSizeOptions: [10, 25, 50, 100],\n    rowStyle(rowData) {\n      return {\n        background: rowData.typeColor,\n      };\n    },\n    columnsButton: true,\n    filtering: true,\n    actionsColumnIndex: -1,\n  };\n};\n\nexport default tableOptions;\n","const actions = ({ addFn, list }) => {\n  const added = (name) => {\n    return list.includes(name);\n  }\n  return [\n    rowData => ({\n      icon: added(rowData.name) ? 'remove_circle' : 'add_circle',\n      tooltip: added(rowData.name) ? 'Remove from compare' : 'Add to compare',\n      onClick: () => {\n        addFn(rowData.name);\n      },\n      iconProps: {\n        style: {\n          fontSize: 30,\n          color: added(rowData.name) ? 'red' : '#FFF',\n        },\n      },\n    }),\n  ];\n};\n\nexport default actions;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst isHighest = (val, fieldToCheck, bestValues) => (\n  +val === bestValues[fieldToCheck] ?\n    <HighestValueCell>{val}</HighestValueCell> :\n    <span>{val}</span>\n)\n\nconst FighterDetailsComponent = (props) => {\n  const { fighter, bestValues } = props;\n  return (\n    <FighterDetails>\n      <FighterName id={fighter.name} color={fighter.typeColor}>{fighter.name}</FighterName>\n      <FighterStats>\n        {/* <div>\n          ISV: {`STR ${fighter.str} AGI ${fighter.agi} END ${fighter.end}`}\n        </div>\n        <div>\n          Growth: {`STR ${fighter.strGrowth} AGI ${fighter.agiGrowth} END ${fighter.endGrowth}`}\n        </div>\n        <div>\n          BMV: {`STR ${fighter.strBmv} AGI ${fighter.agiBmv} END ${fighter.endBmv}`}\n        </div>\n        <div>\n          MAX: {`STR ${fighter.calcStr} AGI ${fighter.calcAgi} END ${fighter.calcEnd}`}\n        </div>\n        <div>\n          MAX: {`1% ATK ${fighter.calcAtk} SPD/EVA ${fighter.calcSpd} 1% HP ${fighter.calcHp}`}\n        </div> */}\n        <Table>\n          <tbody>\n            <tr>\n              <td>ISV</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.str, 'str', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.agi, 'agi', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.end, 'end', bestValues)}</td>\n            </tr>\n\n            {/* <tr>\n              <td>Growth</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.strGrowth, 'strGrowth', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.agiGrowth, 'agiGrowth', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.endGrowth, 'endGrowth', bestValues)}</td>\n            </tr> */}\n\n            <tr>\n              <td>BMV</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.strBmv, 'strBmv', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.agiBmv, 'agiBmv', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.endBmv, 'endBmv', bestValues)}</td>\n            </tr>\n\n            <tr>\n              <td>MAX</td>\n              <td>STR</td>\n              <td>{isHighest(fighter.calcStr, 'calcStr', bestValues)}</td>\n              <td>AGI</td>\n              <td>{isHighest(fighter.calcAgi, 'calcAgi', bestValues)}</td>\n              <td>END</td>\n              <td>{isHighest(fighter.calcEnd, 'calcEnd', bestValues)}</td>\n            </tr>\n\n            <tr>\n              <td>MAX</td>\n              <td>ATK</td>\n              <td>{isHighest(fighter.calcAtk, 'calcAtk', bestValues)} %</td>\n              <td>SPD<br />EVA</td>\n              <td>{isHighest(fighter.calcSpd, 'calcSpd', bestValues)}</td>\n              <td>HP</td>\n              <td>{isHighest(fighter.calcHp, 'calcHp', bestValues)} %</td>\n            </tr>\n          </tbody>\n        </Table>\n      </FighterStats>\n    </FighterDetails>\n  );\n};\n\nexport default FighterDetailsComponent;\n\nconst FighterName = styled.div`\n  font-weight: bold;\n  font-size: 14px;\n  color: ${({ color }) => `${color}`};\n`;\nconst FighterStats = styled.div`\n  margin-left: 10px;\n`;\nconst Table = styled.table`\n  font-size: 14px;\n  border-collapse: collapse;\n  tr {\n    td:nth-child(1) {\n      font-weight: bold;\n      border-right: 1px solid black;\n    }\n  }\n  td {\n    /* border: 1px solid black; */\n    width: 75px;\n    height: 30px;\n    border-bottom: 1px solid black;\n  }\n`;\nconst FighterDetails = styled.div`\n  margin-bottom: 10px;\n`;\nconst HighestValueCell = styled.span`\n  color: red;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DisplaySwitch = props => {\n  const { displayType, onClick, compareCtr } = props;\n  return (\n    <>\n      Switch Display:\n      <DisplayOption\n        displayType={displayType}\n        type=\"text\"\n        onClick={() => onClick('text')}\n      >\n        <i className=\"fas fa-font\" /> Text\n      </DisplayOption>\n      <DisplayOption\n        displayType={displayType}\n        type=\"table\"\n        onClick={() => onClick('table')}\n      >\n        <i className=\"fas fa-table\" /> Table\n      </DisplayOption>\n      <DisplayOption\n        displayType={displayType}\n        type=\"compare\"\n        onClick={() => onClick('compare')}\n      >\n        <i className=\"fas fa-search\" /> Compare ({compareCtr})\n      </DisplayOption>\n    </>\n  );\n};\n\nexport default DisplaySwitch;\n\nconst DisplayOption = styled.button`\n  margin: 0 10px;\n  cursor: pointer;\n  background-color: ${({ displayType, type }) =>\n    displayType === type ? '#4CAF50' : '#909090'};\n  border: none;\n  color: white;\n  padding: 5px 25px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n`;\n","import React, { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { StringUtil, StorageUtil } from 'common-utils-pkg';\nimport { columns, makeData, tableOptions, tableActions } from './utils';\nimport FighterDetails from './FighterDetails';\nimport DisplaySwitch from './DisplaySwitch';\n\nimport fighterslist from './data/fighters.json';\n\nconst getHighestValue = (array, field) => Math.max(...array.map(o => o[field]));\nconst getLowestValue = (array, field) => Math.min(...array.map(o => o[field]));\n\nclass FightersPage extends Component {\n  constructor() {\n    super();\n    const rememberDisplayType = StorageUtil.getItem('displayType') || 'text';\n    this.state = {\n      level: 30,\n      displayType: rememberDisplayType,\n      compareFighters: [],\n      compareFightersCtr: 0,\n    };\n    this.displayChange = this.displayChange.bind(this);\n    this.addToCompare = this.addToCompare.bind(this);\n  }\n\n  levelChange(e) {\n    this.setState({\n      level: e.currentTarget.value,\n    });\n  }\n\n  displayChange(val) {\n    this.setState({\n      displayType: val,\n    });\n    StorageUtil.setItem('displayType', val);\n  }\n\n  addToCompare(name) {\n    const { compareFighters, compareFightersCtr } = this.state;\n    if (!compareFighters.includes(name)) {\n      this.setState({\n        compareFighters: [...compareFighters, name],\n        compareFightersCtr: compareFightersCtr + 1,\n      });\n    } else {\n      const myItems = compareFighters;\n      const newItems = myItems.filter(f => f !== name);\n      this.setState({\n        compareFighters: newItems,\n        compareFightersCtr: compareFightersCtr - 1,\n      });\n    }\n  }\n\n  render() {\n    const getComparedData = (data, selected) =>\n      data.filter(f => selected.includes(f.name));\n    const {\n      level,\n      displayType,\n      compareFightersCtr,\n      compareFighters,\n    } = this.state;\n    const calculatedDataTable = makeData(fighterslist, level, 'table');\n    const calculatedDataText = makeData(fighterslist, level, 'text');\n    const comparedData = getComparedData(calculatedDataTable, compareFighters);\n    const highestStats = {\n      str: getHighestValue(calculatedDataTable, 'str'),\n      agi: getHighestValue(calculatedDataTable, 'agi'),\n      end: getHighestValue(calculatedDataTable, 'end'),\n\n      // strGrowth: getHighestValue(calculatedDataTable, 'strGrowth'),\n      // agiGrowth: getHighestValue(calculatedDataTable, 'agiGrowth'),\n      // endGrowth: getHighestValue(calculatedDataTable, 'endGrowth'),\n\n      strBmv: getLowestValue(calculatedDataTable, 'strBmv'),\n      agiBmv: getLowestValue(calculatedDataTable, 'agiBmv'),\n      endBmv: getLowestValue(calculatedDataTable, 'endBmv'),\n\n      calcStr: getHighestValue(calculatedDataTable, 'calcStr'),\n      calcAgi: getHighestValue(calculatedDataTable, 'calcAgi'),\n      calcEnd: getHighestValue(calculatedDataTable, 'calcEnd'),\n\n      calcAtk: getHighestValue(calculatedDataTable, 'calcAtk'),\n      calcSpd: getHighestValue(calculatedDataTable, 'calcSpd'),\n      calcHp: getHighestValue(calculatedDataTable, 'calcHp'),\n    };\n    const tableTitle = 'Fighter Stats';\n    return (\n      <>\n        <div className=\"page-title\">Fighters</div>\n        <FightersContaine>\n          <Options>\n            <FighterLevel>\n              <label>Fighter Level </label>\n              <input\n                type=\"number\"\n                value={level}\n                onChange={e => this.levelChange(e)}\n              />\n            </FighterLevel>\n            <DisplaySwitchArea>\n              <DisplaySwitch\n                displayType={displayType}\n                onClick={this.displayChange}\n                compareCtr={compareFightersCtr}\n              />\n            </DisplaySwitchArea>\n          </Options>\n          <ContentArea>\n            {/* Text */}\n            {displayType === 'text' && (\n              <TextDisplay>\n                The colored stats are the BEST value for each type.\n                {_.map(calculatedDataText, val => (\n                  <div key={val[0]}>\n                    <FighterTypeText>\n                      {StringUtil.toSentenceCase(val[0])} Expert Fighters\n                    </FighterTypeText>\n                    {_.map(val[1], fighter => (\n                      <FighterDetails\n                        fighter={fighter}\n                        key={fighter.name}\n                        bestValues={highestStats}\n                      />\n                    ))}\n                  </div>\n                ))}\n              </TextDisplay>\n            )}\n\n            {/* Table */}\n            {displayType === 'table' && (\n              <MaterialTable\n                columns={columns}\n                data={calculatedDataTable}\n                title={tableTitle}\n                options={tableOptions(calculatedDataTable.length)}\n                actions={tableActions({\n                  addFn: this.addToCompare,\n                  list: compareFighters,\n                })}\n              />\n            )}\n\n            {/* Compare */}\n            {displayType === 'compare' && (\n              <MaterialTable\n                columns={columns}\n                data={comparedData}\n                title={tableTitle}\n                options={tableOptions(calculatedDataTable.length)}\n                localization={{\n                  body: {\n                    emptyDataSourceMessage:\n                      'Please add fighters from the table section',\n                  },\n                }}\n                actions={tableActions({\n                  addFn: this.addToCompare,\n                  list: compareFighters,\n                })}\n              />\n            )}\n          </ContentArea>\n        </FightersContaine>\n      </>\n    );\n  }\n}\n\nexport default FightersPage;\n\nconst FightersContaine = styled.div`\n  display: grid;\n  grid-template-areas:\n    'options'\n    'content';\n  grid-template-rows:\n    '1fr'\n    'max-content';\n`;\nconst FighterLevel = styled.div`\n  grid-area: level;\n  margin-bottom: 10px;\n  input {\n    text-align: center;\n    width: 50px;\n  }\n`;\nconst DisplaySwitchArea = styled.div`\n  grid-area: switch;\n`;\nconst ContentArea = styled.div`\n  grid-area: content;\n`;\nconst TextDisplay = styled.div`\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12);\n  padding: 20px 24px;\n  background: #fff;\n`;\nconst Options = styled.div`\n  grid-area: options;\n  display: grid;\n  grid-template-areas: 'level switch';\n  grid-template-columns: repeat(2, max-content);\n  column-gap: 10px;\n`;\nconst FighterTypeText = styled.div`\n  /* text-align: center; */\n  font-weight: bold;\n  text-decoration: underline;\n  font-size: 16px;\n  margin: 10px 0;\n`;\n"],"sourceRoot":""}